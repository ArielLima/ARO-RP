// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/preview.aro.openshift.io_previewfeatures.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x18\xcd\x6e\xdb\x46\xf3\xae\xa7\x18\xe4\x3b\xf8\x2b\x5a\x49\x0d\x7a\x69\x75\x73\xe5\x24\x15\x92\xc6\x82\x6d\xe4\x12\xe4\x30\x22\x87\xd4\xc6\xe4\x2c\xbb\x33\xab\xc4\x29\xfa\xee\xc5\x2e\x49\x89\x92\x29\x59\x4c\x90\x4b\x79\x91\x38\x3b\xff\xff\xcb\xd1\x78\x3c\x1e\x61\x65\xde\x91\x13\x63\x79\x06\x58\x19\xfa\xac\xc4\xe1\x4d\x26\xf7\xbf\xca\xc4\xd8\xe9\xe6\xf9\xe8\xde\x70\x3a\x83\xb9\x17\xb5\xe5\x0d\x89\xf5\x2e\xa1\x2b\xca\x0c\x1b\x35\x96\x47\x25\x29\xa6\xa8\x38\x1b\x01\x20\xb3\x55\x0c\x60\x09\xaf\x00\x89\x65\x75\xb6\x28\xc8\x8d\x73\xe2\xc9\xbd\x5f\xd1\xca\x9b\x22\x25\x17\x99\xb7\xa2\xff\xef\xf9\x9e\xed\x27\xfe\x61\x04\x90\x38\x8a\x1c\xee\x4c\x49\xa2\x58\x56\x33\x60\x5f\x14\x23\x00\xc6\x92\x66\x90\x14\x5e\x94\x9c\x4c\xd0\xd9\x89\xad\x88\x65\x6d\x32\x9d\x18\x3b\x92\x8a\x92\x20\x36\x77\xd6\x57\x33\x78\x74\x5e\x73\x68\x34\x6b\xac\xaa\x99\x45\x48\x61\x44\x5f\x77\xa1\x6f\x8c\x68\x3c\xa9\x0a\xef\xb0\xd8\x89\x8e\x40\x31\x9c\xfb\x02\xdd\x16\x3c\x02\x90\xc4\x56\xd4\xe5\xda\x58\x18\x65\x8e\x1b\x03\x36\xcf\xb1\xa8\xd6\xf8\xbc\xe6\x92\xac\xa9\xc4\x5a\x25\x80\xa0\xee\xe5\x72\xf1\xee\x97\xdb\x3d\x30\x40\x4a\x92\x38\x53\x69\xf4\x56\xc3\x1e\x8c\x80\xae\x09\x6a\x5c\xc8\xac\x8b\xaf\xad\x92\x70\xb9\x5c\x6c\xe9\x2b\x67\x2b\x72\x6a\x5a\xeb\xeb\xa7\x13\xfd\x0e\xf4\x40\xda\x45\x50\xa8\xc6\x82\x34\x84\x9d\x6a\xb1\x8d\x69\x94\x36\x36\x80\xcd\x40\xd7\x46\xc0\x51\xe5\x48\x88\xeb\x44\xd8\x63\x0c\x01\x09\x19\xec\xea\x23\x25\x3a\x81\x5b\x72\x81\x0d\xc8\xda\xfa\x22\x0d\xd9\xb2\x21\xa7\xe0\x28\xb1\x39\x9b\x2f\x5b\xde\x02\x6a\xa3\xd0\x02\x95\x9a\xa0\xec\x1e\xc3\x4a\x8e\xb1\x80\x0d\x16\x9e\x7e\x02\xe4\x14\x4a\x7c\x00\x47\x41\x0a\x78\xee\xf0\x8b\x28\x32\x81\x3f\xad\x23\x30\x9c\xd9\x19\xac\x55\x2b\x99\x4d\xa7\xb9\xd1\x36\xeb\x13\x5b\x96\x9e\x8d\x3e\x4c\x63\x02\x9b\x95\x57\xeb\x64\x9a\xd2\x86\x8a\xa9\x98\x7c\x8c\x2e\x59\x1b\xa5\x44\xbd\xa3\x29\x56\x66\x1c\x55\xe7\x98\xf9\x93\x32\xfd\x9f\x6b\xea\x44\x2e\xf6\x74\xd5\x87\x90\x1e\xa2\xce\x70\xde\x39\x88\xb9\x78\x22\x02\x21\x2b\x43\xb4\xb1\x21\xad\xad\xd8\x39\x3a\x80\x82\x77\x6e\x5e\xdc\xde\x41\x2b\x3a\x06\xe3\xd0\xfb\xd1\xef\x3b\x42\xd9\x85\x20\x38\xcc\x70\x46\xae\x0e\x62\xe6\x6c\x19\x79\x12\xa7\x95\x35\xac\x4d\x6e\x19\xe2\x43\xf7\x8b\x5f\x95\x46\x43\xdc\xff\xf2\x24\x1a\x62\x35\x81\x79\x6c\x05\xb0\x22\xf0\x55\x8a\x4a\xe9\x04\x16\x0c\x73\x2c\xa9\x98\xa3\xd0\x77\x0f\x40\xf0\xb4\x8c\x83\x63\xcf\x0b\x41\xb7\x8b\x1d\x22\xd7\x5e\xeb\x1c\xb4\x8d\xe6\x48\xbc\x9a\xfa\xbc\xad\x28\xd9\xab\x98\x94\xc4\xb8\x90\xd3\x8a\x4a\xa1\x12\xba\xdd\xa7\x7d\xfa\x2b\x35\x3c\x98\xb8\x2b\x5b\xa2\xe1\xc3\x83\xa3\x46\x41\x5d\xe3\x0b\xd6\xc5\x72\x18\x51\xc7\xbb\xbd\x1d\x62\x47\x1f\x8a\x2f\x3f\xb0\x01\x00\xbf\xbc\xe0\x8d\x71\x96\x4b\x62\x1d\x24\x7a\x85\xcc\xe4\x1e\x93\xec\x79\xf8\xf7\x88\xb4\x75\xae\xc9\x00\x5b\x58\xd3\x4a\x56\x14\xfe\x7d\xe2\xb6\x71\x24\x71\x7c\x3d\xd2\xf3\x94\xbf\xa1\x99\x5f\xbd\x16\x3c\x61\xc5\xd1\xd4\x89\x4c\xeb\xb0\xb7\xb3\xf4\x55\x18\x57\x8b\x74\x90\x97\xd2\xe1\x89\x90\xa3\xd2\x27\x7c\xa8\x53\xa8\xc7\x58\xa3\x54\xf6\xfa\xe0\x0c\x33\xd1\x39\x7c\xe8\x97\xb7\x74\x66\x83\x4a\x2f\x9a\x36\x32\x30\x11\x73\x62\xda\xe0\x1b\x9b\xe7\x86\xf3\xc7\x94\x4f\x06\x2f\x33\xf9\xd1\xfc\x8d\x0c\x50\xc3\xec\x98\xc1\xc5\xfb\x9f\xc7\xbf\x7d\xf8\x71\x52\xff\x5c\x0c\x8f\x37\x40\x69\xd9\xa8\x0d\x87\xaf\xe6\xb7\x97\x49\x62\xfd\xb1\xc4\x21\xf6\x65\xff\xc9\x18\x2e\x6f\xae\xdb\xf5\xc3\xe6\xb2\x78\x7b\x77\x16\xde\xf2\xe6\xfa\xea\x2c\xc4\x6f\x36\xec\x64\x5d\x3f\x65\xdc\x95\xc1\x9c\xad\xa8\x49\x64\xe9\x6c\x7a\x04\xeb\xee\xf1\x88\x6f\x8f\xe6\xf8\x12\x8d\xcb\xf0\xf3\x37\xdb\xf1\x36\xac\x82\x15\x26\xf4\x1f\x08\xd1\x89\x5e\x63\x38\x73\x38\xb0\xb9\x18\xce\x1d\x89\x0c\x2c\xd5\x7a\x0b\x23\x9d\xaf\x29\xb9\xef\xeb\xe0\xa7\x8b\xd5\xbb\xa2\x17\x7e\xa2\x31\x3d\xa1\x50\x17\xa1\xaf\x41\x9d\xf4\x5b\x61\x93\xb8\xbe\x0e\x72\x41\xb0\x0f\xd5\xba\xac\xc0\xbc\x47\x63\x4c\xd3\x78\x65\xc2\x62\x79\xd2\x15\x27\x6d\xda\x9b\x83\xd7\x8d\xc0\x97\x41\xe0\x76\x1c\x66\x84\x61\x70\xc7\x0e\x2c\xdb\x7b\xc1\xe5\xcd\xf5\x16\x7f\x88\x27\xda\x7d\xb2\x2f\x89\xf6\x94\x69\xe7\xd9\xe2\xaa\xbd\x99\x5c\x7e\x09\x6a\xec\x18\xd4\x57\x04\xea\x5c\x98\xce\x36\x7c\xc3\xa4\x83\xd2\xf8\xd8\xea\xa6\xa8\x5e\xce\x58\xde\x22\xde\xde\xfa\x66\x57\x12\x76\xe5\xaf\xde\xdf\x12\xcb\x75\xfc\x87\x0c\xdf\xde\x70\xcf\x5b\x4e\xc1\xd1\x1f\xbd\xd4\xcb\xb9\x28\x72\x8a\x2e\xdd\x09\x82\xcc\x50\x91\xca\xa4\x87\xef\xe9\x62\x04\x28\x50\xf4\xce\x21\x8b\x69\xef\xe2\xc7\x2a\x30\xb3\xae\x44\x9d\x41\xd8\xf2\xc7\x6a\x4a\xfa\xda\x4a\x2d\x49\x04\xf3\xa3\x72\x9e\xa4\x77\x84\x72\x6c\xce\x9f\x41\xde\x97\x19\x03\xc8\x23\xc2\xd7\x11\x9f\x28\xbe\x53\xfd\xab\xed\x36\x4f\x2c\xe8\xbd\x62\x1d\xa5\x7f\xa0\xbe\xa6\x07\x59\xd6\x37\xc1\xef\xbd\x0f\xf6\xda\xf8\x08\x58\x17\xd8\x0c\xd4\xf9\x3a\x8d\x44\xad\x0b\x39\xd1\x81\xf8\xd5\xf6\x72\xdd\x6a\xd7\x84\x0e\xfe\xfe\x67\xb4\x8b\x22\x26\x09\x55\x4a\xe9\xdb\xc3\x6f\x3e\xcf\x9e\xed\x7d\xd4\x89\xaf\x9d\xda\x84\xf7\x1f\x46\xb5\x60\x4a\xdf\xb5\x9f\x6f\x02\xf0\xdf\x00\x00\x00\xff\xff\xbb\xe7\xaf\x7f\x31\x13\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _previewAroOpenshiftIo_previewfeaturesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xe3\xb6\x12\x7e\xf7\xaf\x18\xec\x79\xc8\x39\xc0\x5a\x4e\x4e\x81\x45\xe1\xb7\x34\x7b\x69\xb0\x97\x04\x71\x90\xa2\x28\xfa\x30\x16\x47\x32\x37\x14\xa9\x25\x87\x76\xdd\xa2\xff\xbd\x20\x29\xd9\x96\x2c\xc5\xd9\xc5\x96\x4f\x16\x2f\xdf\xdc\xbe\x99\x21\x3d\x99\x4e\xa7\x13\xac\xe5\x03\x59\x27\x8d\x9e\x03\xd6\x92\xfe\x60\xd2\xe1\xcb\x65\x8f\x3f\xba\x4c\x9a\xd9\xfa\x62\xf2\x28\xb5\x98\xc3\x95\x77\x6c\xaa\x3b\x72\xc6\xdb\x9c\x5e\x53\x21\xb5\x64\x69\xf4\xa4\x22\x46\x81\x8c\xf3\x09\x00\x6a\x6d\x18\xc3\xb4\x0b\x9f\x00\xb9\xd1\x6c\x8d\x52\x64\xa7\x25\xe9\xec\xd1\x2f\x69\xe9\xa5\x12\x64\x23\x78\x2b\xfa\xbf\x5e\x3f\x6a\xb3\xd1\xff\x9b\x00\xe4\x96\x22\xc2\xbd\xac\xc8\x31\x56\xf5\x1c\xb4\x57\x6a\x02\xa0\xb1\xa2\x39\xd4\x96\xd6\x92\x36\x05\x21\x7b\x4b\x2e\x6b\xbe\x33\xb4\x26\x33\x35\x69\xb7\x92\x05\x67\xd2\x4c\x5c\x4d\x79\xd0\xa2\xb4\xc6\xd7\xbb\x73\xc7\xfb\x12\x70\xa3\x70\x32\xf6\x36\xed\x7d\x9b\x64\xc4\x05\x25\x1d\xbf\x1f\x58\xfc\x20\x1d\xc7\x0d\xb5\xf2\x16\xd5\x91\x7e\x71\xcd\x49\x5d\x7a\x85\xb6\xbf\x3a\x01\x70\xb9\xa9\x69\x0e\x57\xca\x3b\x26\x3b\x01\x68\x9c\x12\xf5\x99\x36\x36\xaf\x2f\x50\xd5\x2b\xbc\x48\x60\xf9\x8a\x2a\x4c\xea\x02\x04\x53\x2e\x6f\xaf\x1f\x7e\x58\x74\xa6\x01\x04\xb9\xdc\xca\x9a\xa3\x83\xbb\x3a\x83\x74\xc0\x2b\x82\x74\x04\x0a\x63\xe3\x67\xa3\x1b\x34\xca\xc1\xe5\xed\xf5\x0e\xad\xb6\xa6\x26\xcb\xb2\xf5\x53\x1a\x07\xf4\x39\x98\xed\xc9\x3e\x0b\xea\xa5\x5d\x20\x02\x6f\x28\x49\x6f\x0c\x25\xd1\x58\x04\xa6\x00\x5e\x49\x07\x96\x6a\x4b\x8e\x74\x62\x52\x07\x18\xc2\x26\xd4\x60\x96\x9f\x29\xe7\x0c\x16\x64\x03\x0c\xb8\x95\xf1\x4a\x04\xba\xad\xc9\x32\x58\xca\x4d\xa9\xe5\x9f\x3b\x6c\x07\x6c\xa2\x50\x85\x4c\x4d\xc0\xf6\x43\x6a\x26\xab\x51\xc1\x1a\x95\xa7\x97\x80\x5a\x40\x85\x5b\xb0\x14\xa4\x80\xd7\x07\x78\x71\x8b\xcb\xe0\xa3\x09\x7e\xd4\x85\x99\xc3\x8a\xb9\x76\xf3\xd9\xac\x94\xdc\xa6\x4d\x6e\xaa\xca\x6b\xc9\xdb\x59\xcc\x00\xb9\xf4\x6c\xac\x9b\x09\x5a\x93\x9a\x39\x59\x4e\xd1\xe6\x2b\xc9\x94\x07\x47\xcf\xb0\x96\xd3\xa8\xba\x8e\xa9\x93\x55\xe2\x3f\xb6\x49\x34\x77\xd6\xd1\x95\xb7\x81\x2c\x8e\xad\xd4\xe5\xc1\x42\x64\xed\x13\x11\x08\xc4\x0d\x41\xc7\xe6\x68\xb2\x62\xef\xe8\x30\x15\xbc\x73\xf7\x66\x71\x0f\xad\xe8\x18\x8c\xbe\xf7\xa3\xdf\xf7\x07\xdd\x3e\x04\xc1\x61\x52\x17\x64\x53\x10\x0b\x6b\xaa\x88\x49\x5a\xd4\x46\x6a\x8e\x1f\xb9\x92\xa4\xfb\xee\x77\x7e\x59\x49\x0e\x71\xff\xe2\xc9\x71\x88\x55\x06\x57\xb1\x96\xc0\x92\xc0\xd7\x02\x99\x44\x06\xd7\x1a\xae\xb0\x22\x75\x85\x8e\xfe\xf5\x00\x04\x4f\xbb\x69\x70\xec\xf3\x42\x70\x58\x06\xfb\x9b\x93\xd7\x0e\x16\xda\xd2\x34\x12\xaf\x6e\xb6\x2e\x6a\xca\x3b\x89\xd3\xcf\xd3\x90\xbf\x97\x77\x37\x1d\xbc\xe1\x7c\x0d\x43\xbb\xf2\xad\x32\x9b\x0f\xa6\x3c\x5a\xea\xa9\xf1\x69\xf1\xae\xdd\x19\x0b\x39\x4a\x1d\x7f\x14\xb2\xf4\x36\xe6\x66\x14\xfd\x69\xf1\x0e\x0a\x65\x36\xa0\x4c\xe9\xb2\x23\x48\x80\x9b\x4a\x36\xd1\xef\x9c\x95\x05\x6c\x8d\x07\x61\xf4\x19\xc3\x06\xf5\x6e\x4f\xd3\x31\x42\xca\x86\xc4\xd3\xb9\x54\x34\x00\x7b\x42\xee\xb8\x07\xc2\x20\x8d\x4b\x45\x62\x68\xa9\x9f\x3c\x6f\xd2\xd6\x4e\x08\x96\xb4\xc2\xb5\x34\xde\xa6\xa2\x45\x7b\x45\xed\x30\x24\xc0\x66\x45\x1a\xd8\x7a\xea\x9b\xb9\x91\x4a\x01\xdb\x6d\xb2\x17\xf3\x55\xdc\x20\xc8\x49\x4b\xa2\xeb\xb3\x97\x4f\x61\x17\xa8\x1c\x81\xe4\x0e\xa0\x90\x2e\x68\x1f\x21\xf7\xce\x3a\x1b\xc4\x49\x64\x5d\x1a\xa3\x08\xfb\x65\x37\x0c\x4b\x9c\x12\x64\xcc\x6b\x05\x7a\xc5\x73\xf8\xff\xc5\xab\xf3\xd5\x69\xc7\xde\xb5\x70\x50\x93\x95\x46\x44\x32\x85\x14\x1a\xe2\xd0\x68\xde\xb5\xc3\xb1\xb1\x58\xd2\x65\x9e\x1b\xaf\xb9\xbd\xa7\x5c\x3f\x27\xc2\x8b\xe1\xa3\xaf\xdb\xae\xb2\xa4\x26\xf6\x22\x70\xf6\xa7\x5f\x6f\xa6\xcd\x89\x91\x68\x60\x02\x0a\x05\xd7\xbb\x50\xb8\x3e\x7a\x17\x2b\x99\xd4\x31\x0e\x0e\xab\x40\x98\x32\x98\x6e\x8a\x5d\x58\xbe\xc9\x6c\xb6\x58\x14\x32\xbf\xd4\xa8\xb6\x2c\x73\x77\x1d\x5a\xd9\x1a\xd5\x89\x10\xbd\x3a\xaf\x9e\xc1\xfc\x16\x0c\x90\x61\xb3\x92\x81\x99\x26\x10\x52\xf8\x9c\x93\xda\xd8\xca\xcd\xe0\x21\x36\xc6\x31\xf6\xbf\x3a\xaf\x5e\xc2\xc5\x79\x95\xc1\xeb\x03\x1d\x46\x88\x48\xda\x57\xc3\x40\xd3\x51\xcd\xa7\x01\xfd\x7b\x78\xf0\x83\x29\x77\xbf\x7f\x31\xf6\xd1\xd5\xf8\x4c\x1e\xdd\xd1\x17\x1f\x73\x36\x10\xf9\xbe\x07\x3b\xc8\x82\x11\x67\x7d\x27\x6e\xac\x87\xae\x66\x7b\xcd\xdb\x6c\x3d\x6d\x58\xff\xf6\xd6\x00\x07\x05\x0f\x8b\xf0\xb0\x92\x4f\x05\xf3\x62\x64\x7e\x58\xa7\x64\x6e\xb8\xac\x95\xf1\xa6\xdc\x1d\xb6\xf1\xfe\xb1\xac\x69\x5b\xed\x8f\x56\x46\xda\xf3\x78\xdf\x66\x64\xef\x9e\xdf\xb9\xe3\xf6\x4e\xe3\x30\x4b\x17\xee\x4b\x22\x42\x51\xf0\xe0\xc0\x5b\xa3\x1d\xe3\x2d\x2c\x24\xa1\x3c\x78\x67\x1d\x0e\xc9\x54\x0d\xe6\x61\x47\xd3\x9b\x9a\x2c\xb2\xb1\x57\x2d\x52\x28\x57\x9f\x03\x45\x23\x39\x19\xb5\x40\x2b\xf6\x82\xa0\x90\xa4\xc4\x60\x7f\x7f\xba\xd3\x02\x28\x74\x7c\x6f\x51\x3b\xd9\xbe\xeb\xc6\xaa\x44\x61\x6c\x85\x3c\x0f\x5d\x80\xa6\x2c\x47\x13\xe4\x04\xf1\xc3\x6d\xcc\x39\x2c\x47\xe5\x9c\x3c\x6f\x09\xdd\x58\xe6\x3c\xe3\xf8\x10\x4f\xbe\xe2\x78\xdc\xf0\x6d\x87\x47\x19\xbd\x5f\x44\x6b\x71\xdb\xbf\xd7\x37\x6c\x18\x7c\xcd\x9d\x10\x6b\x49\xfc\x8c\xfc\x9e\xb6\xee\x36\x3d\x0a\xbe\x82\x92\x4f\x5a\x33\xa6\xee\xa0\x8d\x47\x93\x29\xcf\xe6\xf1\xca\x95\x26\x52\xd3\x3e\x9c\xf1\xcb\xdd\x3b\xab\xd5\xae\x09\x1d\xfc\xf5\xf7\x64\x1f\x45\xcc\x73\xaa\x99\xc4\xa7\xfe\x1f\x05\x2f\x5e\x74\xde\xfe\xf1\xf3\x20\x37\xe1\xb7\xdf\x27\x49\x30\x89\x87\xf6\x5d\x1f\x26\xff\x09\x00\x00\xff\xff\xc6\xdb\x70\xf9\x7d\x11\x00\x00")

func previewAroOpenshiftIo_previewfeaturesYamlBytes() ([]byte, error) {
	return bindataRead(
		_previewAroOpenshiftIo_previewfeaturesYaml,
		"preview.aro.openshift.io_previewfeatures.yaml",
	)
}

func previewAroOpenshiftIo_previewfeaturesYaml() (*asset, error) {
	bytes, err := previewAroOpenshiftIo_previewfeaturesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preview.aro.openshift.io_previewfeatures.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml":                aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":                        masterDeploymentYaml,
	"master/rolebinding.yaml":                       masterRolebindingYaml,
	"master/service.yaml":                           masterServiceYaml,
	"master/serviceaccount.yaml":                    masterServiceaccountYaml,
	"namespace.yaml":                                namespaceYaml,
	"preview.aro.openshift.io_previewfeatures.yaml": previewAroOpenshiftIo_previewfeaturesYaml,
	"worker/deployment.yaml":                        workerDeploymentYaml,
	"worker/role.yaml":                              workerRoleYaml,
	"worker/rolebinding.yaml":                       workerRolebindingYaml,
	"worker/serviceaccount.yaml":                    workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"preview.aro.openshift.io_previewfeatures.yaml": {previewAroOpenshiftIo_previewfeaturesYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
